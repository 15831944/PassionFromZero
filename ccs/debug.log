07/11/13

1. in setMapValue()

	tempValue = floor((int)recordSBM_.get(*itr, isValid) * 255.0/maxLabel);

recordSBM_ should be tempScrollingByteMap_

2. in setWithCombineCheck()

	labelGet() could return 0, this leads to the problem that whether we should label tempScrollingByteMap_'s occupied cells to 255, like what we did to recordSBM_.

3. 

 After segmentationMap_'s centerMap(), we can then do:  tempScrollingByteMap_ = segmentationMap_.getDataMap(), to adjust the map boundary


4. connectedComponentSearch():
// check rightdown
rightdownState = neighbourCheck(rightdownPT, isValid);
if ( (boundaryState != 3) && rightdownState ) // not at the rightside
{
    if (!downState)
    {
        // left and leftdown, at least one cell is occupied, we should segmentsCombine()
        if (leftState)
            setWithCombineCheck(*ii, leftPT, rightdownPT, isValid);
        else if (leftdownState)
            setWithCombineCheck(*ii, leftdownPT, rightdownPT, isValid);
    }
}

CHANGES TO:

// check rightdown
rightdownState = neighbourCheck(rightdownPT, isValid);
if ( (boundaryState != 3) && rightdownState ) // not at the rightside
{
    if (!downState)
    {
        // left and leftdown, at least one cell is occupied, we should segmentsCombine()
        if (leftState)
            setWithCombineCheck(*ii, leftPT, rightdownPT, isValid);
        else if (leftdownState)
            setWithCombineCheck(*ii, leftdownPT, rightdownPT, isValid);
        else
            setWithoutCombineCheck(*ii, rightdownPT, isValid);
    }
}



5.setWithCombineCheck():
/* Set the cell label and Check combine  */
void CCS::setWithCombineCheck(const RecPoint3D & operPT, const RecPoint3D & infoPT1, const RecPoint3D & infoPT2, bool & isValid)
{
    int tempLabel2 = labelGet(infoPT1, isValid);
    int tempLabel3 = labelGet(infoPT2, isValid);
    int tempLabel = min(tempLabel2, tempLabel3);
    labelSet(operPT, tempLabel, isValid);
    segLabel[tempLabel].push_back(operPT);

    int tempLabel4 = max(tempLabel2, tempLabel3);
    if ( tempLabel != tempLabel4 )  // two segments should combine!
    {
        //LogSegCombineCheck(operPT, );

        segmentsCombine(tempLabel, tempLabel4, isValid);
        //LogSegCombineCheck(operPT);
    }
}

CHANGES TO:

void CCS::setWithCombineCheck(const RecPoint3D & infoPT1, const RecPoint3D & infoPT2, bool & isValid)
{
	int LabelPT1 = labelGet(infoPT1, isValid);
	int LabelPT2 = labelGet(infoPT2, isValid);
	int Labelmin = min(LabelPT1, LabelPT2);
//    labelSet(operPT, tempLabel, isValid);
//    segLabel[tempLabel].push_back(operPT);

	int Labelmax = max(LabelPT1, LabelPT2);
	if ( Labelmin != Labelmax )  // two segments should combine!
	{
		//LogSegCombineCheck(operPT, );

		segmentsCombine(Labelmin, Labelmax, isValid);
		//LogSegCombineCheck(operPT);
	}
}


6. add "segLabelAdjust()"
/* Adjust the segLabel, eliminate 0 size segments */
void CCS::segLabelAdjust()
{
	int adjustTimes=0, firstZeroLabel=0;
	bool isValid(false);

	// adjust the label
	for (int i=1; i<=maxLabel; ++i)
	{
		if (segLabel[i].size() == 0)
		{
			cout << "segLabel[" << i << "] is zero (after each adjustion)." << endl;
			adjustTimes++;
			if (adjustTimes == 1)
				firstZeroLabel=i;

			for (int j=i; j<maxLabel; ++j)
			{
				//segLabel[j].clear();
				segLabel[j]=segLabel[j+1];
			}
			segLabel[maxLabel].clear();
			maxLabel--;

			--i;  //in case there are 2 Continuous 0 size segments
		}
	}

	cout << adjustTimes << " adjustments have been done!" << endl;

	// adjust the corresponding cell values
	for (int i=maxLabel; i>=firstZeroLabel; --i)
	{
		for (vector<RecPoint3D>::iterator jj=segLabel[i].begin();
			 jj != segLabel[i].end();
			 ++jj)
		{
			labelSet(*jj, i, isValid);
		}
	}

}




7. change ScrollingByteMap to ScrollingShortMap

- This is crucial! because:
for scrollingMap<unsigned char>: the max Segment_Label is 2^8-1=255
for scrollingMap<short>:         the max Segment_Label is 2^16-1=65535
